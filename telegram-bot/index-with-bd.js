require('dotenv').config();
const TelegramApi = require('node-telegram-bot-api');
const sequelize = require('./db');
const UserModel = require('./models');
const { gameOptions, againOptions } = require('./options');

const token = process.env.TELEGRAM_TOKEN;
const bot = new TelegramApi(token, { polling: true });

const chats = {};

const startGame = async (chatId) => {
  await bot.sendMessage(
    chatId,
    `–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ—ë —É–≥–∞–¥–∞—Ç—å! ‚òù`
  );

  chats[chatId] = {
    data: Math.ceil(Math.random() * 10),
    attempts: 2,
  };

  await bot.sendMessage(chatId, '–£ —Ç–µ–±—è 3 –ø–æ–ø—ã—Ç–∫–∏! üòº', gameOptions);
};

const start = async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
  } catch (e) {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ —Å–ª–æ–º–∞–ª–æ—Å—å', e);
  }

  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
    { command: '/game', description: '–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π —Ü–∏—Ñ—Ä—É' },
  ]);

  bot.on('message', async (msg) => {
    const chatId = String(msg.chat.id);
    const text = msg.text;

    try {
      if (text === '/start') {
        await UserModel.findOrCreate({ where: { chatId } });
        await bot.sendSticker(
          chatId,
          'https://chpic.su/_data/stickers/b/biscuit_no_text/biscuit_no_text_001.webp'
        );
        return bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º! üò∏');
      }

      if (text === '/info') {
        const user = await UserModel.findOne({ where: { chatId } });
        if (!user) {
          return bot.sendMessage(chatId, `–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è (/start))`);
        }
        return bot.sendMessage(
          chatId,
          `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} ${msg.from.last_name}. –í –∏–≥—Ä–µ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${user.right}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ${user.wrong}`
        );
      }

      if (text === '/game') {
        const user = await UserModel.findOne({ where: { chatId } });
        if (!user) {
          return bot.sendMessage(chatId, `–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è (/start))`);
        }
        return startGame(chatId);
      }

      await bot.sendSticker(
        chatId,
        'https://chpic.su/_data/stickers/b/biscuit_no_text/biscuit_no_text_015.webp'
      );
      return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
    } catch (e) {
      return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞! üòø');
    }
  });

  bot.on('callback_query', async (msg) => {
    const data = msg.data;
    const chatId = String(msg.message.chat.id);

    if (data === '/again') {
      return startGame(chatId);
    }

    if (!chats[chatId]) {
      return;
    }

    if (data == chats[chatId].data) {
      await bot.sendMessage(
        chatId,
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId].data} üëèüò∏`,
        againOptions
      );
      delete chats[chatId];
      const user = await UserModel.findOne({ where: { chatId } });
      user.right += 1;
      await user.save();
    } else if (chats[chatId].attempts) {
      await bot.sendMessage(
        chatId,
        `–¢—ã –Ω–µ —É–≥–∞–¥–∞–ª. –£ —Ç–µ–±—è ${chats[chatId].attempts} ${
          chats[chatId].attempts === 1 ? '–ø–æ–ø—ã—Ç–∫–∞' : '–ø–æ–ø—ã—Ç–∫–∏'
        } üôÄ`
      );
      chats[chatId].attempts--;
    } else {
      await bot.sendMessage(
        chatId,
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª. –Ø –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId].data} üòæ`,
        againOptions
      );
      delete chats[chatId];
      const user = await UserModel.findOne({ where: { chatId } });
      user.wrong += 1;
      await user.save();
    }
  });
};

start();
